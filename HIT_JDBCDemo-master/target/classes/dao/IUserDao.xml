<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.IUserDao">
    <!-- 配置查询所有操作 -->
    <!--<select id="findAll" resultMap="userMap">-->
        <!--select * from user-->
    <!--</select>-->

    <select id="findByID" resultType="domain.User" parameterType="int">
        select * from user where id = #{uid}
    </select>

    <insert id="saveUser" parameterType="domain.User" useGeneratedKeys="true" keyProperty="id">
        insert into user(username,birthday,sex,address) values(#{userName},#{userBirthday},#{userSex},#{userAddress})
    </insert>

    <update id="updateUser" parameterType="domain.User">
        update user set username=#{userName},birthday=#{userBirthday},sex=#{userSex},address=#{userAddress} where id=#{userId}
    </update>

    <delete id="deleteUser" parameterType="int">
        delete from user where id =#{id}
    </delete>

    <select id="findByName" resultType="domain.User" parameterType="String">
        select * from user where username like #{username}
    </select>

    <select id="findByNameNew" resultType="domain.User" parameterType="String">
        select * from user where username like '%${value}%'
    </select>

    <select id="count" resultType="int">
        select count(1) from user
    </select>


    <select id="findByVo" resultMap="userMap"
            parameterType="domain.QueryVo">
        select * from user
        <where>
            <if test="username!=null and username!=''">
                and username like #{username}
            </if>
            <if test="address != null">
                and address like #{address}
            </if>
        </where>
    </select>

    <select id="findAll" resultMap="userMap">
        select u.*,acc.id accid,acc.uid,acc.money FROM user u LEFT JOIN account
        acc ON u.id = acc.uid
    </select>

    <resultMap id="userMap" type="domain.User">
        <id column="id" property="userId"/>
        <result column="username" property="userName"/>
        <result column="sex" property="userSex"/>
        <result column="address" property="userAddress"/>
        <result column="birthday" property="userBirthday"/>
        <collection property="accounts" ofType="domain.Account">
            <id column="accid" property="id"/>
            <result column="uid" property="uid"/>
            <result column="money" property="money"/>
        </collection>
    </resultMap>

</mapper>